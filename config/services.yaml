# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    app.finance_gRPC_host: '%env(FINANCE_GRPC_HOST)%'
    paysera_road_runner.intercept_side_effect: true
        
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/AppKernel.php'

    Spiral\RoadRunner\Environment: ~

    Spiral\RoadRunner\EnvironmentInterface:
        factory: [ '@Spiral\RoadRunner\Environment', 'fromGlobals' ]

    Spiral\RoadRunner\WorkerInterface:
        autowire: true
        factory: [ Spiral\RoadRunner\Worker, 'createFromEnvironment' ]
        arguments:
            $env: '@Spiral\RoadRunner\EnvironmentInterface'
            $interceptSideEffects: '%paysera_road_runner.intercept_side_effect%'
            $logger: '@Psr\Log\LoggerInterface'

    Spiral\RoadRunner\Http\HttpWorkerInterface:
        class: Spiral\RoadRunner\Http\HttpWorker
        arguments:
            $worker: '@Spiral\RoadRunner\WorkerInterface'

    Spiral\Goridge\RPC\RPCInterface:
        factory: [ '@App\RoadrunnerBundle\Helpers\RPCFactory', 'fromEnvironment' ]
        arguments:
            $environment: '@Spiral\RoadRunner\EnvironmentInterface'

    Spiral\RoadRunner\Metrics\MetricsInterface:
        class: Spiral\RoadRunner\Metrics\Metrics
        arguments:
            $rpc: '@Spiral\Goridge\RPC\RPCInterface'

    App\RoadrunnerBundle\RoadRunnerBridge\HttpFoundationWorkerInterface:
        class: App\RoadrunnerBundle\RoadRunnerBridge\HttpFoundationWorker
        arguments:
            $httpWorker: '@Spiral\RoadRunner\Http\HttpWorkerInterface'

    App\RoadrunnerBundle\Worker\HttpWorker:
        public: true
        tags:
            - { name: monolog.logger, channel: '@\App\RoadrunnerBundle\DependencyInjection\PayseraRoadRunnerExtension::MONOLOG_CHANNEL' }
        arguments:
            $kernel: '@kernel'
            $logger: '@Psr\Log\LoggerInterface'
            $httpFoundationWorker: '@App\RoadrunnerBundle\RoadRunnerBridge\HttpFoundationWorkerInterface'

    App\RoadrunnerBundle\Worker\WorkerRegistryInterface:
        public: true
        class: App\RoadrunnerBundle\Worker\WorkerRegistry
        calls:
            - registerWorker: [ 'http', '@App\RoadrunnerBundle\Worker\HttpWorker' ]
            - registerWorker: [ 'grpc', '@App\RoadrunnerBundle\Worker\GrpcWorker' ]
            - registerWorker: [ 'jobs', '@App\RoadrunnerBundle\Worker\Job\JobWorker' ]

    App\RoadrunnerBundle\Http\KernelHandler:
        arguments:
            $kernel: '@kernel'

    App\RoadrunnerBundle\Http\MiddlewareStack:
        arguments:
            $kernelHandler: '@App\RoadrunnerBundle\Http\KernelHandler'

    App\RoadrunnerBundle\Worker\HttpDependencies:
        public: true
        arguments:
            $requestHandler: '@App\RoadrunnerBundle\Http\MiddlewareStack'
            $kernelRebootStrategy: '@App\RoadrunnerBundle\Reboot\KernelRebootStrategyInterface'
            $eventDispatcher: '@Symfony\Contracts\EventDispatcher\EventDispatcherInterface'

    App\RoadrunnerBundle\Http\RequestHandlerInterface:
        public: true
        alias: App\RoadrunnerBundle\Http\MiddlewareStack

    App\RoadrunnerBundle\Grpc\GrpcServiceProvider: ~

    Spiral\RoadRunner\GRPC\Invoker: ~

    Spiral\RoadRunner\GRPC\Server:
        arguments:
            $invoker: '@Spiral\RoadRunner\GRPC\Invoker'

    App\RoadrunnerBundle\Worker\GrpcWorker:
        public: true
        tags:
            - { name: monolog.logger, channel: '@\App\RoadrunnerBundle\DependencyInjection\PayseraRoadRunnerExtension::MONOLOG_CHANNEL' }
        arguments:
            $logger: '@Psr\Log\LoggerInterface'
            $roadRunnerWorker: '@Spiral\RoadRunner\WorkerInterface'
            $grpcServiceProvider: '@App\RoadrunnerBundle\Grpc\GrpcServiceProvider'
            $server: '@Spiral\RoadRunner\GRPC\Server'

    App\RoadrunnerBundle\Worker\Job\Event\Handler\EventHandlerInterface:
        public: true
        class: App\RoadrunnerBundle\Worker\Job\Event\Handler\EventHandler
        arguments:
            $logger: '@Psr\Log\LoggerInterface'

    Spiral\RoadRunner\Jobs\ConsumerInterface:
        public: true
        class: Spiral\RoadRunner\Jobs\Consumer
        arguments:
            $worker: '@Spiral\RoadRunner\WorkerInterface'

    App\RoadrunnerBundle\Worker\Job\JobWorker:
        public: true
        tags:
            - { name: monolog.logger, channel: '@\App\RoadrunnerBundle\DependencyInjection\PayseraRoadRunnerExtension::MONOLOG_CHANNEL' }
        arguments:
            $kernel: '@kernel'
            $logger: '@Psr\Log\LoggerInterface'
            $consumer: '@Spiral\RoadRunner\Jobs\ConsumerInterface'
            $eventHandler: '@App\RoadrunnerBundle\Worker\Job\Event\Handler\EventHandlerInterface'

    Sentry\State\HubInterface:
        public: true
        class: Sentry\State\Hub
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Protobuf\Generated\FinanceClient:
        factory: [ '@App\Protobuf\GRPCClientFactory', 'createGRPCClient' ]
        arguments:
            $className: 'App\Protobuf\Generated\FinanceClient'
            $hostname: '%app.finance_gRPC_host%'
            $port: 9000
            $credentials: 'Insecure'